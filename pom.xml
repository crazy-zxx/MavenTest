<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--  一个Maven工程就是由groupId，artifactId和version作为唯一标识  -->
    <groupId>org.example</groupId>      <!-- 类似于Java的包名，通常是公司或组织名称 -->
    <artifactId>MavenTest</artifactId>  <!-- 类似于Java的类名，通常是项目名称 -->
    <version>1.0-SNAPSHOT</version>     <!-- 版本，只有以-SNAPSHOT结尾的版本号会被Maven视为开发版本，开发版本每次都会重复下载，这种SNAPSHOT版本只能用于内部私有的Maven repo，公开发布的版本不允许出现SNAPSHOT。 -->

<!--    中国区用户可以使用阿里云提供的Maven镜像仓库。
使用Maven镜像仓库需要一个配置，在用户主目录下进入.m2目录，创建一个settings.xml配置文件，内容如下：

<settings>
    <mirrors>
        <mirror>
            <id>aliyun</id>
            <name>aliyun</name>
            <mirrorOf>central</mirrorOf>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
        </mirror>
    </mirrors>
</settings>

-->

    <!--  Maven的第一个作用就是解决依赖管理。我们声明了自己的项目需要abc，Maven会自动导入abc的jar包，再判断出abc需要xyz，又会自动导入xyz的jar包，这样，最终我们的项目会依赖abc和xyz两个jar包。-->
    <!--  依赖  -->
    <dependencies>
        <!--  我们在引用其他第三方库的时候，也是通过上边这3个变量确定  -->
        <!--  使用<dependency>声明一个依赖后，Maven就会自动下载这个依赖包并把它放到classpath中  -->
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.1.1</version>
        </dependency>

        <!--  Maven定义了几种依赖关系，分别是compile、test、runtime和provided：
            scope	            说明	                                示例
            compile	    编译时需要用到该jar包（默认）	            commons-logging
            test	    编译Test时需要用到该jar包	                    junit
            runtime	    编译时不需要，但运行时需要用到	                mysql
            provided	编译时需要用到，但运行时由JDK或某个服务器提供	servlet-api
        -->
        <!-- 默认的compile是最常用的，Maven会把这种类型的依赖直接放入classpath。-->
        <!-- 最常用的test依赖就是JUnit：-->
        <!--    1.4.2 + 5.4.2    -->
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
            <version>1.4.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.4.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>5.4.2</version>
            <scope>test</scope>
        </dependency>
        <!-- 最典型的runtime依赖是JDBC驱动-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.48</version>
            <scope>runtime</scope>
        </dependency>
        <!-- 最典型的provided依赖是Servlet API-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- 如果我们要引用一个第三方组件，比如okhttp，如何确切地获得它的groupId、artifactId和version？
            方法是通过 search.maven.org 搜索关键字，找到对应的组件后，直接复制：-->


    </dependencies>

    <!-- Maven自带的标准插件例如compiler是无需声明的，只有引入其它的插件才需要声明。-->
    <!-- 如果标准插件无法满足需求，我们还可以使用自定义插件。使用自定义插件的时候，需要声明。
        一些常用的插件：
            maven-shade-plugin：打包所有依赖包并生成可执行jar；
            cobertura-maven-plugin：生成单元测试覆盖率报告；
            findbugs-maven-plugin：对Java源码进行静态分析以找出潜在问题。-->
    <build>
        <plugins>
            <plugin>
                <!--    指定maven编译器使用的参数   -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>11</source>         <!-- 源代码使用的JDK版本 -->
                    <target>11</target>         <!-- 需要生成的目标class文件的编译版本 -->
                    <encoding>UTF-8</encoding>  <!-- 字符集编码 -->
                </configuration>
            </plugin>
            <plugin>
                <!-- 使用maven-shade-plugin可以创建一个可执行的jar-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>Test</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>